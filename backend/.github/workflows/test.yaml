name: Testes e Deploy - Sistema de Gest√£o Financeira

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
      - "frontend/**"

env:
  NODE_VERSION: "18"
  NPM_VERSION: "9"

jobs:
  # Job para testar o backend
  test-backend:
    name: Testes Backend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Instalar depend√™ncias do backend
        working-directory: ./backend
        run: npm ci

      - name: Executar testes do backend
        working-directory: ./backend
        run: npm test

      - name: Executar testes com cobertura
        working-directory: ./backend
        run: npm run test:coverage

      - name: Upload relat√≥rio de cobertura para Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          verbose: true

      - name: Verificar qualidade do c√≥digo
        working-directory: ./backend
        run: |
          echo "Verificando depend√™ncias desatualizadas..."
          npm outdated || true
          echo "Verificando vulnerabilidades..."
          npm audit --audit-level=moderate || true

  # Job para testar o frontend (se existir)
  test-frontend:
    name: Testes Frontend
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Verificar estrutura do frontend
        run: |
          if [ -d "frontend" ]; then
            echo "Frontend encontrado, executando verifica√ß√µes..."
            cd frontend
            # Aqui voc√™ pode adicionar testes espec√≠ficos do frontend
            # npm install
            # npm test
            echo "Frontend verificado com sucesso"
          else
            echo "Frontend n√£o encontrado, pulando..."
          fi

  # Job para an√°lise de seguran√ßa
  security-scan:
    name: An√°lise de Seguran√ßa
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Instalar depend√™ncias
        working-directory: ./backend
        run: npm ci

      - name: Executar auditoria de seguran√ßa
        working-directory: ./backend
        run: npm audit --audit-level=high

      - name: Verificar depend√™ncias com vulnerabilidades conhecidas
        working-directory: ./backend
        run: |
          echo "Verificando depend√™ncias vulner√°veis..."
          npm audit --json > audit-report.json || true
          if [ -s audit-report.json ]; then
            echo "‚ö†Ô∏è Vulnerabilidades encontradas:"
            cat audit-report.json | jq -r '.vulnerabilities | keys[]' || true
          else
            echo "‚úÖ Nenhuma vulnerabilidade encontrada"
          fi

  # Job para build e deploy (opcional)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Instalar depend√™ncias
        working-directory: ./backend
        run: npm ci --only=production

      - name: Build do projeto
        working-directory: ./backend
        run: |
          echo "Verificando se o servidor inicia corretamente..."
          timeout 10s npm start || true

      - name: Deploy para produ√ß√£o (exemplo)
        run: |
          echo "üöÄ Deploy para produ√ß√£o iniciado..."
          echo "Aqui voc√™ pode adicionar comandos de deploy espec√≠ficos"
          echo "Exemplo: deploy para Heroku, Vercel, AWS, etc."

      - name: Notificar sucesso do deploy
        run: |
          echo "‚úÖ Deploy conclu√≠do com sucesso!"
          echo "Aplica√ß√£o dispon√≠vel em: https://sua-app.herokuapp.com"

  # Job para documenta√ß√£o
  documentation:
    name: Gerar Documenta√ß√£o
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Instalar depend√™ncias
        working-directory: ./backend
        run: npm ci

      - name: Gerar documenta√ß√£o da API
        working-directory: ./backend
        run: |
          echo "üìö Gerando documenta√ß√£o..."
          # Aqui voc√™ pode adicionar gera√ß√£o de documenta√ß√£o
          # Exemplo: jsdoc, swagger, etc.
          echo "Documenta√ß√£o gerada com sucesso"

      - name: Upload documenta√ß√£o
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: ./backend/docs/
          retention-days: 30

  # Job para notifica√ß√µes
  notify:
    name: Notifica√ß√µes
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, deploy]
    if: always()

    steps:
      - name: Notificar resultado dos testes
        run: |
          if [ "${{ needs.test-backend.result }}" == "success" ]; then
            echo "‚úÖ Testes do backend passaram!"
          else
            echo "‚ùå Testes do backend falharam!"
          fi

          if [ "${{ needs.test-frontend.result }}" == "success" ]; then
            echo "‚úÖ Testes do frontend passaram!"
          else
            echo "‚ùå Testes do frontend falharam!"
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "‚úÖ An√°lise de seguran√ßa passou!"
          else
            echo "‚ùå An√°lise de seguran√ßa falhou!"
          fi

          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deploy realizado com sucesso!"
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è Deploy pulado (n√£o √© branch main)"
          else
            echo "‚ùå Deploy falhou!"
          fi
